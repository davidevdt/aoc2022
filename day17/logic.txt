|..@@@@.|
|...@@@@|
|....@@@@
|...@@@@|			if (n_steps_right > n_steps_left && extreme_right.x >= 6-1) // consider starting from 0 
|..####.|				move_rock_single_step(n_steps_left = (6-extreme_left.x), n_steps_right = 0)
+-------|			
					if (n_steps_left > n_steps_right && extreme_left.x < 0)  
|..@@@@.|				move_rock_single_step(n_steps_left = 0, n_steps_right = (-extreme_left.x))
|.@@@@..|
|..@@@@.|
|...@@@@|
|....@@@@
+---####|

|..@@@@.|
|.@@@@..|
|@@@@...|
|.@@@@..|
|..@@@@.|
+---####|

|..@@@@.|
|.@@@@..|
|@@@@...|
@@@@....|
+---####|

	|..@@@@.|
	|.@@@@..|
	|@@@@...|
	@@@@....|
   @@@@.....|	
	+---####|


|..@@@@.|
|...@@@@|
|....@@@@
|.....@@@@
+---####|

|..##...|
|...##..|
|....##.|
|.....##|
|......##

|..##...|
|.##....|
|##.....|
##......|
|.....|












>>><



left_extreme
right_extreme


struct Rock {
	Coordinate extreme_left, extreme_right; 
	virtual auto get_extreme_left() = 0; 
	virtual auto get_extreme_right() = 0; 
	virtual auto move_rock_from_top(int n_steps_left, int n_steps_right) = 0; 
	virtual auto move_rock_single_step(int n_steps_left, int n_steps_rigth); 
	virtual auto get_starting_configuration() = 0; 
	virtual auto update_coordinates(); 
}

struct CrossRock : Rock final {
	
	
	
}

struct LRock : Rock final {
	
	
	
}


struct HorizontalRock : Rock final {
	
	
	
}

struct VerticalRock : Rock final {
	
	
	
}

struct SquareRock : Rock final {
	
	
	
}











